# Hierarchical TOC Generator - Written by ChatGPT
# Builds a Table of Contents (TOC) for Jekyll documents using existing hierarchical header IDs.
# It scans documents with 'toc: true' in their front matter and constructs a TOC based on the headers' IDs and text.
# The TOC is inserted at the beginning of the document content.
# This generator relies on headers already having unique hierarchical IDs, which can be generated by a preceding plugin.
#
# Example TOC structure for a document with the following headers:
#
# # Drinks          -> id="drinks"
# ## Coffee         -> id="drinks--coffee"
# ### Latte         -> id="drinks--coffee--latte"
# ### Espresso      -> id="drinks--coffee--espresso"
# ## Tea            -> id="drinks--tea"
#
# Would result in a TOC like:
#
# - [Drinks](#drinks)
#   - [Coffee](#drinks--coffee)
#     - [Latte](#drinks--coffee--latte)
#     - [Espresso](#drinks--coffee--espresso)
#   - [Tea](#drinks--tea)

module Jekyll
  class HierarchicalTOCGenerator < Generator
    # Ensure this runs after the hierarchical ID generator
    priority :low

    def generate(site)
      site.documents.each do |doc|
        next unless doc.data['toc']  # Only process documents with 'toc: true'

        toc_content = build_toc(doc.output)

        # Prepend or insert the TOC in the document
        doc.content = "#{toc_content}\n#{doc.content}"
      end
    end

    private

    def build_toc(html_content)
      toc = ""
      html_content.scan(/<(h[1-6])\s*id="([^"]+)"[^>]*>(.*?)<\/\1>/).each do |match|
        level, id, title = match
        indent = "  " * (level[1].to_i - 1)  # Adjust indentation based on header level
        toc << "#{indent}- [#{title.strip}](##{id})\n"
      end
      "## Table of Contents\n#{toc}"
    end
  end
end
